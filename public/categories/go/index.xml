<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on FAN&#39;S BLOG</title>
    <link>http://example.org/categories/go/</link>
    <description>Recent content in Go on FAN&#39;S BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 02 Dec 2020 00:07:48 +0800</lastBuildDate><atom:link href="http://example.org/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go进阶笔记-关于error</title>
      <link>http://example.org/go_advance_note2/</link>
      <pubDate>Wed, 02 Dec 2020 00:07:48 +0800</pubDate>
      
      <guid>http://example.org/go_advance_note2/</guid>
      <description>很多人对于Go的error比较吐槽，说代码中总是会有大量的如下代码： 1 2 3 if err != nil { ... } 其实很多时候是使用的姿势不对，或者说，对于error</description>
    </item>
    
    <item>
      <title>Go进阶笔记-微服务概览与治理</title>
      <link>http://example.org/go_advance_note1/</link>
      <pubDate>Wed, 02 Dec 2020 00:07:36 +0800</pubDate>
      
      <guid>http://example.org/go_advance_note1/</guid>
      <description>基本上在产品的最开始阶段，为了快速构建产品，都是单体架构，尽快我们也会按照业务划分模块，但是这个样子始终最终部署的时候还是单体式应用。 如我们</description>
    </item>
    
    <item>
      <title>ent orm笔记5---结束</title>
      <link>http://example.org/entorm05/</link>
      <pubDate>Wed, 02 Sep 2020 23:09:43 +0800</pubDate>
      
      <guid>http://example.org/entorm05/</guid>
      <description>Hooks Hooks允许你在对表做一些操作的时候添加一些自定义的处理逻辑。如当我对某个表的某条数据进行更新的前和后，做一些自定义的操作，其实这个就和</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/entorm04/</link>
      <pubDate>Mon, 31 Aug 2020 15:08:42 +0800</pubDate>
      
      <guid>http://example.org/entorm04/</guid>
      <description>在前面几篇文章中，我们经常使用的可能就是entc这个命令了，entc这个工具给带来了很多功能，这篇文章主要整理关于ent orm 中Code Generation 之前的</description>
    </item>
    
    <item>
      <title>ent orm笔记3---schema使用(下)</title>
      <link>http://example.org/entorm03/</link>
      <pubDate>Thu, 27 Aug 2020 22:37:34 +0800</pubDate>
      
      <guid>http://example.org/entorm03/</guid>
      <description>Indexes 索引 在前两篇的文章中，其实对于索引也有一些使用， 这里来详细看一下关于索引的使用 Indexes方法可以在一个或者多个字段上设置索引，以提高数</description>
    </item>
    
    <item>
      <title>ent orm笔记2---schema使用(上)</title>
      <link>http://example.org/entorm02/</link>
      <pubDate>Wed, 26 Aug 2020 10:25:49 +0800</pubDate>
      
      <guid>http://example.org/entorm02/</guid>
      <description>在上一篇关于快速使用ent orm的笔记中，我们再最开始使用entc init User 创建schema，在ent orm 中的schema 其实就是数据库模型，在sc</description>
    </item>
    
    <item>
      <title>ent orm笔记1---快速尝鲜</title>
      <link>http://example.org/entorm01/</link>
      <pubDate>Mon, 24 Aug 2020 23:48:37 +0800</pubDate>
      
      <guid>http://example.org/entorm01/</guid>
      <description>前几天看到消息Facebook孵化的ORM ent转为正式项目，出去好奇，简单体验了一下，使用上自己感觉比GORM好用，于是打算把官方的文档进</description>
    </item>
    
    <item>
      <title>从别人的代码中学习golang系列--03</title>
      <link>http://example.org/study_code_03/</link>
      <pubDate>Fri, 31 Jul 2020 10:08:55 +0800</pubDate>
      
      <guid>http://example.org/study_code_03/</guid>
      <description>这篇博客还是整理从https://github.com/LyricTian/gin-admin 这个项目中学习的golang相关知识。 作者在项</description>
    </item>
    
    <item>
      <title>从别人的代码中学习golang系列--02</title>
      <link>http://example.org/study_code_02/</link>
      <pubDate>Fri, 03 Jul 2020 21:10:32 +0800</pubDate>
      
      <guid>http://example.org/study_code_02/</guid>
      <description>这篇博客还是整理从https://github.com/LyricTian/gin-admin 这个项目中学习的golang相关知识 作者在项目</description>
    </item>
    
    <item>
      <title>从别人的代码中学习golang系列--01</title>
      <link>http://example.org/study_code_01/</link>
      <pubDate>Wed, 24 Jun 2020 23:48:11 +0800</pubDate>
      
      <guid>http://example.org/study_code_01/</guid>
      <description>​ 自己最近在思考一个问题，如何让自己的代码质量逐渐提高，于是想到整理这个系列，通过阅读别人的代码，从别人的代码中学习，来逐渐提高自己的代码质</description>
    </item>
    
    <item>
      <title>Go单元测试</title>
      <link>http://example.org/go_test/</link>
      <pubDate>Sat, 09 May 2020 01:03:02 +0800</pubDate>
      
      <guid>http://example.org/go_test/</guid>
      <description>Go标准库：testing 提供了单元测试和压力测试 Golang 单元测试要求 用来测试的代码必须以_test.go结尾 单元测试的函数名必须以Test开头(</description>
    </item>
    
    <item>
      <title>开发中的一些规范</title>
      <link>http://example.org/development_standard/</link>
      <pubDate>Wed, 29 Apr 2020 14:10:24 +0800</pubDate>
      
      <guid>http://example.org/development_standard/</guid>
      <description>基本要求(Go) 项目代码必须通过lint工具的风格检查 必须go fmt 建议使用Go Modules 必须有单元测试 必要的CI 编码风格 Uber Go Style Guide code commit 原则 代码的comm</description>
    </item>
    
  </channel>
</rss>
